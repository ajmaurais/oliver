{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Oliver An opinionated Cromwell orchestration manager. Explore the docs \u00bb Request Feature \u00b7 Report Bug \u00b7 \u2b50 Consider starring the repo! \u2b50 \ud83c\udfa8 Features Workflow Orchestration. Easily submit, inspect, kill, and retry workflows in a Cromwell environment. Better Job Tracking. Jobs can be associated with names and job groups to enable better status reporting. Dynamic Argument Parsing. Specify inputs and options on the command line rather than editing JSON files. Third-party Cloud Integrations. Use the aws and azure subcommands to explore cloud-specific functionality. \ud83d\udcda Getting Started Installation Conda Oliver is distributed as a package using the community-curated Anaconda repository, conda-forge . You'll need to install conda , and we recommend that you first follow the instructions included in the conda-forge documentation to get everything set up! conda install oliver -c conda-forge Python Package Index You can also install Oliver using the Python Package Index ( PyPI ). pip install stjudecloud-oliver Configuring Next, we recommend that you configure oliver so that common arguments can be saved. By default, Oliver will prompt you for the answers interactively. oliver configure If you are setting up Oliver programmatically, you can accept a default configuration ( oliver configure --defaults ) and edit from there using oliver config . \ud83d\ude8c A Quick Tour At its foundation, Oliver is an opinionated job orchestrator for Cromwell. Commonly, you will want to use it to submit a job, inspect a job's status, kill a job, retry a job (possibly with different parameters), and organize job results. If you're interested in a complete overview of Oliver's capabilities, please see the documentation pages . Submit a Job The simplest possible job submission is one which submits a simple workflow with one or more input JSON file(s) and/or key-value pair(s). oliver submit workflow.wdl inputs.json input_key=input_value You can similarly set workflow options and labels by prepending arguments with @ and % respectively. # works for files too! oliver submit workflow.wdl @option=foo %label=bar Please see the docs for more details on job submission. Inspect a Job Once a job is submitted, you can interrogate the Cromwell server about its status. oliver inspect workflow-id If you aren't sure what workflow identifier was given to your job, you can easily track it down using the status subcommand. # detailed view, which shows individual workflow statuses oliver status -d Kill a Job If, for whatever reason, you'd like to stop a job, you can use Oliver to instruct Cromwell to do so. oliver kill workflow-id Retry a Job Retrying a workflow is similarly easy: even if you need to override previously set parameters (e.g. increase the memory capacity for a task). # override previous inputs by specifying arguments (the same way as you would for `submit`). oliver retry workflow-id \ud83d\udda5\ufe0f Development If you are interested in contributing to the code, please first review our CONTRIBUTING.md document. To bootstrap a development environment, please use the following commands. # Clone the repository git clone git@github.com:stjudecloud/oliver.git cd oliver # Install the project using poetry poetry install # Ensure pre-commit is installed to automatically format # code using `black`. brew install pre-commit pre-commit install pre-commit install --hook-type commit-msg \ud83d\udea7\ufe0f Tests Oliver provides a (currently patchy) set of tests \u2014 both unit and end-to-end. To get started with testing, you'll need to bootstrap a Docker test environment (one-time operation). # Start development environment docker image build --tag oliver . docker-compose up --build -d alias docker-run-oliver=\"docker container run \\ -it \\ --rm \\ --network oliver_default \\ --mount type=bind,source=$PWD/seeds,target=/opt/oliver/seeds \\ --mount type=bind,source=$PWD/oliver,target=/opt/oliver/oliver \\ --mount type=bind,source=$PWD/tests,target=/opt/oliver/tests \\ --entrypoint '' \\ oliver:latest\" # Seed development environment (make sure Cromwell is live first!) docker-run-oliver bash seeds/seed.sh http://cromwell:8000 seeds/wdl/hello.wdl docker-run-oliver pytest --cov=./ --cov-report=xml To reset your entire docker-compose environment, you can run the following: docker-compose down docker image rm oliver:latest docker image rm oliver_cromwell:latest docker image rm mysql:5.7 docker volume rm oliver_mysql_data docker network rm oliver_default docker image build --tag oliver . docker-compose up --build -d \ud83e\udd1d Contributing Contributions, issues and feature requests are welcome! Feel free to check issues page . You can also take a look at the contributing guide . \ud83d\udcdd License Copyright \u00a9 2020 St. Jude Cloud Team . This project is MIT licensed.","title":"Home"},{"location":"#features","text":"Workflow Orchestration. Easily submit, inspect, kill, and retry workflows in a Cromwell environment. Better Job Tracking. Jobs can be associated with names and job groups to enable better status reporting. Dynamic Argument Parsing. Specify inputs and options on the command line rather than editing JSON files. Third-party Cloud Integrations. Use the aws and azure subcommands to explore cloud-specific functionality.","title":"\ud83c\udfa8 Features"},{"location":"#getting-started","text":"","title":"\ud83d\udcda Getting Started"},{"location":"#installation","text":"","title":"Installation"},{"location":"#conda","text":"Oliver is distributed as a package using the community-curated Anaconda repository, conda-forge . You'll need to install conda , and we recommend that you first follow the instructions included in the conda-forge documentation to get everything set up! conda install oliver -c conda-forge","title":"Conda"},{"location":"#python-package-index","text":"You can also install Oliver using the Python Package Index ( PyPI ). pip install stjudecloud-oliver","title":"Python Package Index"},{"location":"#configuring","text":"Next, we recommend that you configure oliver so that common arguments can be saved. By default, Oliver will prompt you for the answers interactively. oliver configure If you are setting up Oliver programmatically, you can accept a default configuration ( oliver configure --defaults ) and edit from there using oliver config .","title":"Configuring"},{"location":"#a-quick-tour","text":"At its foundation, Oliver is an opinionated job orchestrator for Cromwell. Commonly, you will want to use it to submit a job, inspect a job's status, kill a job, retry a job (possibly with different parameters), and organize job results. If you're interested in a complete overview of Oliver's capabilities, please see the documentation pages .","title":"\ud83d\ude8c A Quick Tour"},{"location":"#submit-a-job","text":"The simplest possible job submission is one which submits a simple workflow with one or more input JSON file(s) and/or key-value pair(s). oliver submit workflow.wdl inputs.json input_key=input_value You can similarly set workflow options and labels by prepending arguments with @ and % respectively. # works for files too! oliver submit workflow.wdl @option=foo %label=bar Please see the docs for more details on job submission.","title":"Submit a Job"},{"location":"#inspect-a-job","text":"Once a job is submitted, you can interrogate the Cromwell server about its status. oliver inspect workflow-id If you aren't sure what workflow identifier was given to your job, you can easily track it down using the status subcommand. # detailed view, which shows individual workflow statuses oliver status -d","title":"Inspect a Job"},{"location":"#kill-a-job","text":"If, for whatever reason, you'd like to stop a job, you can use Oliver to instruct Cromwell to do so. oliver kill workflow-id","title":"Kill a Job"},{"location":"#retry-a-job","text":"Retrying a workflow is similarly easy: even if you need to override previously set parameters (e.g. increase the memory capacity for a task). # override previous inputs by specifying arguments (the same way as you would for `submit`). oliver retry workflow-id","title":"Retry a Job"},{"location":"#development","text":"If you are interested in contributing to the code, please first review our CONTRIBUTING.md document. To bootstrap a development environment, please use the following commands. # Clone the repository git clone git@github.com:stjudecloud/oliver.git cd oliver # Install the project using poetry poetry install # Ensure pre-commit is installed to automatically format # code using `black`. brew install pre-commit pre-commit install pre-commit install --hook-type commit-msg","title":"\ud83d\udda5\ufe0f Development"},{"location":"#tests","text":"Oliver provides a (currently patchy) set of tests \u2014 both unit and end-to-end. To get started with testing, you'll need to bootstrap a Docker test environment (one-time operation). # Start development environment docker image build --tag oliver . docker-compose up --build -d alias docker-run-oliver=\"docker container run \\ -it \\ --rm \\ --network oliver_default \\ --mount type=bind,source=$PWD/seeds,target=/opt/oliver/seeds \\ --mount type=bind,source=$PWD/oliver,target=/opt/oliver/oliver \\ --mount type=bind,source=$PWD/tests,target=/opt/oliver/tests \\ --entrypoint '' \\ oliver:latest\" # Seed development environment (make sure Cromwell is live first!) docker-run-oliver bash seeds/seed.sh http://cromwell:8000 seeds/wdl/hello.wdl docker-run-oliver pytest --cov=./ --cov-report=xml To reset your entire docker-compose environment, you can run the following: docker-compose down docker image rm oliver:latest docker image rm oliver_cromwell:latest docker image rm mysql:5.7 docker volume rm oliver_mysql_data docker network rm oliver_default docker image build --tag oliver . docker-compose up --build -d","title":"\ud83d\udea7\ufe0f Tests"},{"location":"#contributing","text":"Contributions, issues and feature requests are welcome! Feel free to check issues page . You can also take a look at the contributing guide .","title":"\ud83e\udd1d Contributing"},{"location":"#license","text":"Copyright \u00a9 2020 St. Jude Cloud Team . This project is MIT licensed.","title":"\ud83d\udcdd License"},{"location":"advanced-guides/output-prefixing/","text":"Output Prefixing In some scenarios, it's helpful to modify the output prefixing reported by Cromwell. For instance, in the case of Cromwell on Azure , Cromwell mounts the storage location as a FUSE filesystem. This leads to Cromwell reporting the location of output files or logs like so: /cromwell-execution/rnaseq_standard/<UUID>/call-multiqc/multiqc_results.tar.gz In general, this location is not ammenable to quickly leveraging in another script to download the file. In this case, we have chosen to create the output_prefix configuration option that allows prefixing any output locations with a string. For instance, if the output prefix is azure://container-name , the reported output of the above will be azure://container-name/cromwell-execution/rnaseq_standard/<UUID>/call-multiqc/multiqc_results.tar.gz This string is much more amenable to copying and pasting. You can set this configuration option by running the following command. oliver config set output_prefix \"azure://container-name\"","title":"Output Prefixing"},{"location":"advanced-guides/output-prefixing/#output-prefixing","text":"In some scenarios, it's helpful to modify the output prefixing reported by Cromwell. For instance, in the case of Cromwell on Azure , Cromwell mounts the storage location as a FUSE filesystem. This leads to Cromwell reporting the location of output files or logs like so: /cromwell-execution/rnaseq_standard/<UUID>/call-multiqc/multiqc_results.tar.gz In general, this location is not ammenable to quickly leveraging in another script to download the file. In this case, we have chosen to create the output_prefix configuration option that allows prefixing any output locations with a string. For instance, if the output prefix is azure://container-name , the reported output of the above will be azure://container-name/cromwell-execution/rnaseq_standard/<UUID>/call-multiqc/multiqc_results.tar.gz This string is much more amenable to copying and pasting. You can set this configuration option by running the following command. oliver config set output_prefix \"azure://container-name\"","title":"Output Prefixing"},{"location":"getting-started/configuration/","text":"Configuration Configuration for Oliver is stored in the config file as JSON. By default, the dotfile is location at ~/.oliver_config . One of the benefits of using Oliver is the \"set and forget\" nature of configuration. For instance, a common configuration option that you might want to set rather than providing on the command line is the URL to your Cromwell server. Basics Before using Oliver, you should run the configuration quickstart wizard: oliver configure If you just want to accept the defaults, or if you are using Oliver in a non interactive environment like CI, you can just start with the default configuration. oliver configure --defaults Similarly, you can use the oliver config subcommand to display current config values, get specific key-value pairs, or set new values for configuration options. # list all config values oliver config list # get a particular key oliver config get cromwell_server # set a particular key's value oliver config set cromwell_server http://foo:8000 Commonly Used Options The following key values pairs are commonly used to configure Oliver. Note that any key in the argparse parser can be specified in the configuration \u2014 if you would like to set any of these options and don't mind looking through Python code, you can do so (we do not exhaustively list all possible config options here). Key Description Type Default cromwell_server HTTP/HTTPS root URL for the Cromwell server to use by default. String http://localhost:8000 cromwell_api_version Cromwell API version to use by default. String v1 batch_interval_mins When inferring batches, how many minutes should separate two batches? Int 2 output_prefix Prefix to append to file locations. String None Cromwell on Azure Specific Key Description Type Default azure_resource_group If using Cromwell on Azure, resource group associated with your Cromwell instance. String cosmos_account_name If using Cromwell on Azure, name of CosmosDB associated with your Cromwell instance. String","title":"Configuration"},{"location":"getting-started/configuration/#configuration","text":"Configuration for Oliver is stored in the config file as JSON. By default, the dotfile is location at ~/.oliver_config . One of the benefits of using Oliver is the \"set and forget\" nature of configuration. For instance, a common configuration option that you might want to set rather than providing on the command line is the URL to your Cromwell server.","title":"Configuration"},{"location":"getting-started/configuration/#basics","text":"Before using Oliver, you should run the configuration quickstart wizard: oliver configure If you just want to accept the defaults, or if you are using Oliver in a non interactive environment like CI, you can just start with the default configuration. oliver configure --defaults Similarly, you can use the oliver config subcommand to display current config values, get specific key-value pairs, or set new values for configuration options. # list all config values oliver config list # get a particular key oliver config get cromwell_server # set a particular key's value oliver config set cromwell_server http://foo:8000","title":"Basics"},{"location":"getting-started/configuration/#commonly-used-options","text":"The following key values pairs are commonly used to configure Oliver. Note that any key in the argparse parser can be specified in the configuration \u2014 if you would like to set any of these options and don't mind looking through Python code, you can do so (we do not exhaustively list all possible config options here). Key Description Type Default cromwell_server HTTP/HTTPS root URL for the Cromwell server to use by default. String http://localhost:8000 cromwell_api_version Cromwell API version to use by default. String v1 batch_interval_mins When inferring batches, how many minutes should separate two batches? Int 2 output_prefix Prefix to append to file locations. String None","title":"Commonly Used Options"},{"location":"getting-started/configuration/#cromwell-on-azure-specific","text":"Key Description Type Default azure_resource_group If using Cromwell on Azure, resource group associated with your Cromwell instance. String cosmos_account_name If using Cromwell on Azure, name of CosmosDB associated with your Cromwell instance. String","title":"Cromwell on Azure Specific"},{"location":"getting-started/monitor-jobs/","text":"Monitoring Jobs Another major feature of Oliver is the ease with which you can interrogate workflow status(es). In the simplest case, you can use the oliver status subcommand to get a summary of running jobs much like an HPC environment. oliver status To see individual workflows, you can use the -d / --detail-view parameter to show a \"detailed\" view. oliver status -d You also might be interested in a summary of the status of what steps each workflow in on. For this, you can use the -z / --steps-view parameter to show the \"steps\" view. oliver status -z By default, Oliver only shows all statuses. You can use the -r (Running), -s (Succeeded), -f (Failed), and -a (Aborted) flags to select a subset of these. # only show failed and aborted jobs oliver status -fa Batching If you run hundreds or thousands of workflows, Oliver's response time might become slow because it needs to retrieve information about every workflow Cromwell has ever run. In this case, it's typically useful to think of your job runs as self-contained groups of jobs separated by time called batches . Oliver has facilities baked in to compute batches automatically (meaning you don't need to specify the batch number at submit time). Just ensure the batch_interval_mins configuration variable is set and try oliver batches . oliver batches You can restrict oliver status to only report only a subset of batches. For instance, you can report on the first batch ever run ( -B / --batches-absolute ). oliver status -B 0 Or, more commonly, you are interested in the last batch run ( -b / --batches-relative ). oliver status -b 0 Job Names and Groups If you have submitted jobs with an Oliver Job Name or Oliver Job Group, you can restrict results to only workflows assigned to that name/group. oliver status -g CohortName","title":"Monitoring Jobs"},{"location":"getting-started/monitor-jobs/#monitoring-jobs","text":"Another major feature of Oliver is the ease with which you can interrogate workflow status(es). In the simplest case, you can use the oliver status subcommand to get a summary of running jobs much like an HPC environment. oliver status To see individual workflows, you can use the -d / --detail-view parameter to show a \"detailed\" view. oliver status -d You also might be interested in a summary of the status of what steps each workflow in on. For this, you can use the -z / --steps-view parameter to show the \"steps\" view. oliver status -z By default, Oliver only shows all statuses. You can use the -r (Running), -s (Succeeded), -f (Failed), and -a (Aborted) flags to select a subset of these. # only show failed and aborted jobs oliver status -fa","title":"Monitoring Jobs"},{"location":"getting-started/monitor-jobs/#batching","text":"If you run hundreds or thousands of workflows, Oliver's response time might become slow because it needs to retrieve information about every workflow Cromwell has ever run. In this case, it's typically useful to think of your job runs as self-contained groups of jobs separated by time called batches . Oliver has facilities baked in to compute batches automatically (meaning you don't need to specify the batch number at submit time). Just ensure the batch_interval_mins configuration variable is set and try oliver batches . oliver batches You can restrict oliver status to only report only a subset of batches. For instance, you can report on the first batch ever run ( -B / --batches-absolute ). oliver status -B 0 Or, more commonly, you are interested in the last batch run ( -b / --batches-relative ). oliver status -b 0","title":"Batching"},{"location":"getting-started/monitor-jobs/#job-names-and-groups","text":"If you have submitted jobs with an Oliver Job Name or Oliver Job Group, you can restrict results to only workflows assigned to that name/group. oliver status -g CohortName","title":"Job Names and Groups"},{"location":"getting-started/submit-jobs/","text":"Submitting Jobs One of the novel features provided by Oliver is the ease with which workflow inputs, options, and labels can be set dynamically on the command line. Typically when submitting a workflow, one must craft and POST one or more workflowInputs , workflowOptions , and labels JSON files to Cromwell. This can be cumbersome \u2014 especially when you have thousands of workflows to run. Dynamic Parameter Parsing Oliver provides an improvement over this experience for a few keys reasons: Inputs, options, and labels can be loaded from files or as key-value pairs on the command line. Inputs, options, and labels are processed sequentially and overwrite arguments that were provided earlier on the command line. Oliver distinguishes between inputs, options, and labels based on the prefix provided. For instance, consider the following command: oliver submit workflow.wdl defaults.json sample_name=SJBALL101_D Here, Oliver loads workflow.wdl and begins preparing the workflowInputs (inputs), workflowOptions (options), and labels (labels) JSON objects \u2014 all of which are initialized as {} . Oliver loads the JSON object defined in defaults.json . For each key-value in that object, it adds the pair to workflowInputs , overwriting the pair if it already exists. In this case, the JSON object is empty, so workflowInputs now mirrors what was contained in defaults.json . Oliver recognizes that you have provided sample_name=SJBALL101_D as a key value pair and adds this pair to workflowInputs , overwriting the key if it existed. In this way, you can dynamically set and overwrite inputs with ease to satisfy your use case. Prefixes This process works similarly for all parameter types (inputs, options, or labels). To distinguish them to Oliver, you need to use the following prefixes: Parameter Type Prefix Example Input <none> key=value Option @ @key=value Label % %key=value For example, consider the following command and note the process Oliver follows in the comments: oliver submit workflow.wdl \\ default-inputs.json \\ # loads all values in the JSON file to the inputs object. @default-options.json \\ # loads all values in the JSON file to the options object. %default-labels.json \\ # loads all values in the JSON file to the labels object. input_key=value \\ # adds `input_key=value` to the inputs object (overwrites the value if `input_key` set in default-inputs.json). @option_key=value \\ # adds `option_key=value` to the options object (overwrites the value if `option_key` set in default-options.json). %label_key=value \\ # adds `label_key=value` to the labels object (overwrites the value if `label_key` set in default-labels.json). Inspecting Parameters with Dry Runs Often, it can be useful to inspect how Oliver is parsing the parameters you are passing on the command line. You can easily do so by specifying the dry-run argument. oliver submit workflow.wdl defaults.json sample_name=SJBALL101_D --dry-run Job Names and Groups You can submit jobs with a \"Oliver Job Name\" ( -j ) and \"Oliver Job Group\" ( -g ) to mimic the capabilities of an HPC. Under the hood, Oliver adds these as labels to the workflow. In most Oliver commands, you can then specify these options to restrict results. For instance, if you wished to submit a group of samples with the same job name and then track their status: # Submit jobs for SAMPLE in $SAMPLES; do echo oliver submit $WORKFLOW_URL $DEFAULT_INPUTS_FILE \\ input_bam=${SAMPLE}.bam \\ output_prefix=${SAMPLE}. \\ -j ${SAMPLE} -g CohortAlpha done # Check status of this job group oliver status -g CohortAlpha","title":"Submitting Jobs"},{"location":"getting-started/submit-jobs/#submitting-jobs","text":"One of the novel features provided by Oliver is the ease with which workflow inputs, options, and labels can be set dynamically on the command line. Typically when submitting a workflow, one must craft and POST one or more workflowInputs , workflowOptions , and labels JSON files to Cromwell. This can be cumbersome \u2014 especially when you have thousands of workflows to run.","title":"Submitting Jobs"},{"location":"getting-started/submit-jobs/#dynamic-parameter-parsing","text":"Oliver provides an improvement over this experience for a few keys reasons: Inputs, options, and labels can be loaded from files or as key-value pairs on the command line. Inputs, options, and labels are processed sequentially and overwrite arguments that were provided earlier on the command line. Oliver distinguishes between inputs, options, and labels based on the prefix provided. For instance, consider the following command: oliver submit workflow.wdl defaults.json sample_name=SJBALL101_D Here, Oliver loads workflow.wdl and begins preparing the workflowInputs (inputs), workflowOptions (options), and labels (labels) JSON objects \u2014 all of which are initialized as {} . Oliver loads the JSON object defined in defaults.json . For each key-value in that object, it adds the pair to workflowInputs , overwriting the pair if it already exists. In this case, the JSON object is empty, so workflowInputs now mirrors what was contained in defaults.json . Oliver recognizes that you have provided sample_name=SJBALL101_D as a key value pair and adds this pair to workflowInputs , overwriting the key if it existed. In this way, you can dynamically set and overwrite inputs with ease to satisfy your use case.","title":"Dynamic Parameter Parsing"},{"location":"getting-started/submit-jobs/#prefixes","text":"This process works similarly for all parameter types (inputs, options, or labels). To distinguish them to Oliver, you need to use the following prefixes: Parameter Type Prefix Example Input <none> key=value Option @ @key=value Label % %key=value For example, consider the following command and note the process Oliver follows in the comments: oliver submit workflow.wdl \\ default-inputs.json \\ # loads all values in the JSON file to the inputs object. @default-options.json \\ # loads all values in the JSON file to the options object. %default-labels.json \\ # loads all values in the JSON file to the labels object. input_key=value \\ # adds `input_key=value` to the inputs object (overwrites the value if `input_key` set in default-inputs.json). @option_key=value \\ # adds `option_key=value` to the options object (overwrites the value if `option_key` set in default-options.json). %label_key=value \\ # adds `label_key=value` to the labels object (overwrites the value if `label_key` set in default-labels.json).","title":"Prefixes"},{"location":"getting-started/submit-jobs/#inspecting-parameters-with-dry-runs","text":"Often, it can be useful to inspect how Oliver is parsing the parameters you are passing on the command line. You can easily do so by specifying the dry-run argument. oliver submit workflow.wdl defaults.json sample_name=SJBALL101_D --dry-run","title":"Inspecting Parameters with Dry Runs"},{"location":"getting-started/submit-jobs/#job-names-and-groups","text":"You can submit jobs with a \"Oliver Job Name\" ( -j ) and \"Oliver Job Group\" ( -g ) to mimic the capabilities of an HPC. Under the hood, Oliver adds these as labels to the workflow. In most Oliver commands, you can then specify these options to restrict results. For instance, if you wished to submit a group of samples with the same job name and then track their status: # Submit jobs for SAMPLE in $SAMPLES; do echo oliver submit $WORKFLOW_URL $DEFAULT_INPUTS_FILE \\ input_bam=${SAMPLE}.bam \\ output_prefix=${SAMPLE}. \\ -j ${SAMPLE} -g CohortAlpha done # Check status of this job group oliver status -g CohortAlpha","title":"Job Names and Groups"},{"location":"integrations/aws/","text":"AWS The subcommand oliver aws currently exists for the community to try, but it is not stable enough to write a guide for. In the meantime, if you use Cromwell on AWS and would like to suggest features or report bugs you encounter, we invite you to do so on the issues page.","title":"AWS"},{"location":"integrations/aws/#aws","text":"The subcommand oliver aws currently exists for the community to try, but it is not stable enough to write a guide for. In the meantime, if you use Cromwell on AWS and would like to suggest features or report bugs you encounter, we invite you to do so on the issues page.","title":"AWS"},{"location":"integrations/azure/","text":"Azure Oliver was originally created through the St. Jude Cloud team's close collaboration with the Microsoft Genomics team and, specifically, our the development of Cromwell on Azure . As such, we intend to provide first-class support of Cromwell on Azure and common operations like aggregating results and debugging jobs. The subcommand oliver azure currently exists for the community to try, but the guide is still in progress. We will continue to add to this guide as we add functionality. In the meantime, if you use Cromwell on Azure and would like to suggest features or report bugs you encounter, we invite you to do so on the issues page. CosmosDB When using Cromwell on Azure, CosmosDB is used as the metadata store for Cromwell. It can be extremely useful to peer into this metadata to understand failures that happen outside of Cromwell (for instance, within Azure Batch). Thus, we have integrated custom commands (such as oliver cosmos ) to interrogate this database. If you wish to use this functionality, you'll need to set the following configuration parameters. oliver config set azure_resource_group \"YOUR RESOURCE GROUP NAME\" oliver config set cosmos_account_name \"YOUR COSMOSDB ACCOUNT NAME\" For more information, see our configuration guide .","title":"Azure"},{"location":"integrations/azure/#azure","text":"Oliver was originally created through the St. Jude Cloud team's close collaboration with the Microsoft Genomics team and, specifically, our the development of Cromwell on Azure . As such, we intend to provide first-class support of Cromwell on Azure and common operations like aggregating results and debugging jobs. The subcommand oliver azure currently exists for the community to try, but the guide is still in progress. We will continue to add to this guide as we add functionality. In the meantime, if you use Cromwell on Azure and would like to suggest features or report bugs you encounter, we invite you to do so on the issues page.","title":"Azure"},{"location":"integrations/azure/#cosmosdb","text":"When using Cromwell on Azure, CosmosDB is used as the metadata store for Cromwell. It can be extremely useful to peer into this metadata to understand failures that happen outside of Cromwell (for instance, within Azure Batch). Thus, we have integrated custom commands (such as oliver cosmos ) to interrogate this database. If you wish to use this functionality, you'll need to set the following configuration parameters. oliver config set azure_resource_group \"YOUR RESOURCE GROUP NAME\" oliver config set cosmos_account_name \"YOUR COSMOSDB ACCOUNT NAME\" For more information, see our configuration guide .","title":"CosmosDB"}]}